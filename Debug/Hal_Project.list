
Hal_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c0  080037c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000008c  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a30  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001689  00000000  00000000  00029a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c8  00000000  00000000  0002ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fce0  00000000  00000000  0002c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a526  00000000  00000000  0004c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c47a7  00000000  00000000  0005654e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011acf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000282c  00000000  00000000  0011ad48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003790 	.word	0x08003790

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003790 	.word	0x08003790

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_uldivmod>:
 8000964:	b953      	cbnz	r3, 800097c <__aeabi_uldivmod+0x18>
 8000966:	b94a      	cbnz	r2, 800097c <__aeabi_uldivmod+0x18>
 8000968:	2900      	cmp	r1, #0
 800096a:	bf08      	it	eq
 800096c:	2800      	cmpeq	r0, #0
 800096e:	bf1c      	itt	ne
 8000970:	f04f 31ff 	movne.w	r1, #4294967295
 8000974:	f04f 30ff 	movne.w	r0, #4294967295
 8000978:	f000 b974 	b.w	8000c64 <__aeabi_idiv0>
 800097c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000980:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000984:	f000 f806 	bl	8000994 <__udivmoddi4>
 8000988:	f8dd e004 	ldr.w	lr, [sp, #4]
 800098c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000990:	b004      	add	sp, #16
 8000992:	4770      	bx	lr

08000994 <__udivmoddi4>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	9d08      	ldr	r5, [sp, #32]
 800099a:	4604      	mov	r4, r0
 800099c:	468e      	mov	lr, r1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14d      	bne.n	8000a3e <__udivmoddi4+0xaa>
 80009a2:	428a      	cmp	r2, r1
 80009a4:	4694      	mov	ip, r2
 80009a6:	d969      	bls.n	8000a7c <__udivmoddi4+0xe8>
 80009a8:	fab2 f282 	clz	r2, r2
 80009ac:	b152      	cbz	r2, 80009c4 <__udivmoddi4+0x30>
 80009ae:	fa01 f302 	lsl.w	r3, r1, r2
 80009b2:	f1c2 0120 	rsb	r1, r2, #32
 80009b6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80009be:	ea41 0e03 	orr.w	lr, r1, r3
 80009c2:	4094      	lsls	r4, r2
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	0c21      	lsrs	r1, r4, #16
 80009ca:	fbbe f6f8 	udiv	r6, lr, r8
 80009ce:	fa1f f78c 	uxth.w	r7, ip
 80009d2:	fb08 e316 	mls	r3, r8, r6, lr
 80009d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009da:	fb06 f107 	mul.w	r1, r6, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d90a      	bls.n	80009f8 <__udivmoddi4+0x64>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009ea:	f080 811f 	bcs.w	8000c2c <__udivmoddi4+0x298>
 80009ee:	4299      	cmp	r1, r3
 80009f0:	f240 811c 	bls.w	8000c2c <__udivmoddi4+0x298>
 80009f4:	3e02      	subs	r6, #2
 80009f6:	4463      	add	r3, ip
 80009f8:	1a5b      	subs	r3, r3, r1
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a00:	fb08 3310 	mls	r3, r8, r0, r3
 8000a04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a08:	fb00 f707 	mul.w	r7, r0, r7
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	d90a      	bls.n	8000a26 <__udivmoddi4+0x92>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a18:	f080 810a 	bcs.w	8000c30 <__udivmoddi4+0x29c>
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	f240 8107 	bls.w	8000c30 <__udivmoddi4+0x29c>
 8000a22:	4464      	add	r4, ip
 8000a24:	3802      	subs	r0, #2
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	1be4      	subs	r4, r4, r7
 8000a2c:	2600      	movs	r6, #0
 8000a2e:	b11d      	cbz	r5, 8000a38 <__udivmoddi4+0xa4>
 8000a30:	40d4      	lsrs	r4, r2
 8000a32:	2300      	movs	r3, #0
 8000a34:	e9c5 4300 	strd	r4, r3, [r5]
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0xc2>
 8000a42:	2d00      	cmp	r5, #0
 8000a44:	f000 80ef 	beq.w	8000c26 <__udivmoddi4+0x292>
 8000a48:	2600      	movs	r6, #0
 8000a4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a4e:	4630      	mov	r0, r6
 8000a50:	4631      	mov	r1, r6
 8000a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a56:	fab3 f683 	clz	r6, r3
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d14a      	bne.n	8000af4 <__udivmoddi4+0x160>
 8000a5e:	428b      	cmp	r3, r1
 8000a60:	d302      	bcc.n	8000a68 <__udivmoddi4+0xd4>
 8000a62:	4282      	cmp	r2, r0
 8000a64:	f200 80f9 	bhi.w	8000c5a <__udivmoddi4+0x2c6>
 8000a68:	1a84      	subs	r4, r0, r2
 8000a6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a6e:	2001      	movs	r0, #1
 8000a70:	469e      	mov	lr, r3
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d0e0      	beq.n	8000a38 <__udivmoddi4+0xa4>
 8000a76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a7a:	e7dd      	b.n	8000a38 <__udivmoddi4+0xa4>
 8000a7c:	b902      	cbnz	r2, 8000a80 <__udivmoddi4+0xec>
 8000a7e:	deff      	udf	#255	; 0xff
 8000a80:	fab2 f282 	clz	r2, r2
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	f040 8092 	bne.w	8000bae <__udivmoddi4+0x21a>
 8000a8a:	eba1 010c 	sub.w	r1, r1, ip
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2601      	movs	r6, #1
 8000a98:	0c20      	lsrs	r0, r4, #16
 8000a9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000aa2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aa6:	fb0e f003 	mul.w	r0, lr, r3
 8000aaa:	4288      	cmp	r0, r1
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x12c>
 8000aae:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x12a>
 8000ab8:	4288      	cmp	r0, r1
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2c0>
 8000abe:	4643      	mov	r3, r8
 8000ac0:	1a09      	subs	r1, r1, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac8:	fb07 1110 	mls	r1, r7, r0, r1
 8000acc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x156>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x154>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2ca>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000af2:	e79c      	b.n	8000a2e <__udivmoddi4+0x9a>
 8000af4:	f1c6 0720 	rsb	r7, r6, #32
 8000af8:	40b3      	lsls	r3, r6
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa20 f407 	lsr.w	r4, r0, r7
 8000b06:	fa01 f306 	lsl.w	r3, r1, r6
 8000b0a:	431c      	orrs	r4, r3
 8000b0c:	40f9      	lsrs	r1, r7
 8000b0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b12:	fa00 f306 	lsl.w	r3, r0, r6
 8000b16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b1a:	0c20      	lsrs	r0, r4, #16
 8000b1c:	fa1f fe8c 	uxth.w	lr, ip
 8000b20:	fb09 1118 	mls	r1, r9, r8, r1
 8000b24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b28:	fb08 f00e 	mul.w	r0, r8, lr
 8000b2c:	4288      	cmp	r0, r1
 8000b2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b8>
 8000b34:	eb1c 0101 	adds.w	r1, ip, r1
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2bc>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2bc>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4461      	add	r1, ip
 8000b4c:	1a09      	subs	r1, r1, r0
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b54:	fb09 1110 	mls	r1, r9, r0, r1
 8000b58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	458e      	cmp	lr, r1
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1e2>
 8000b64:	eb1c 0101 	adds.w	r1, ip, r1
 8000b68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2b4>
 8000b6e:	458e      	cmp	lr, r1
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2b4>
 8000b72:	3802      	subs	r0, #2
 8000b74:	4461      	add	r1, ip
 8000b76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b7e:	eba1 010e 	sub.w	r1, r1, lr
 8000b82:	42a1      	cmp	r1, r4
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46a6      	mov	lr, r4
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x2a4>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x2a0>
 8000b8c:	b15d      	cbz	r5, 8000ba6 <__udivmoddi4+0x212>
 8000b8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b92:	eb61 010e 	sbc.w	r1, r1, lr
 8000b96:	fa01 f707 	lsl.w	r7, r1, r7
 8000b9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b9e:	40f1      	lsrs	r1, r6
 8000ba0:	431f      	orrs	r7, r3
 8000ba2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ba6:	2600      	movs	r6, #0
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	40d8      	lsrs	r0, r3
 8000bb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	4301      	orrs	r1, r0
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bd0:	0c0b      	lsrs	r3, r1, #16
 8000bd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bda:	429e      	cmp	r6, r3
 8000bdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x260>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b8>
 8000bec:	429e      	cmp	r6, r3
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b8>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	1b9b      	subs	r3, r3, r6
 8000bf6:	b289      	uxth	r1, r1
 8000bf8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000c00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c04:	fb06 f30e 	mul.w	r3, r6, lr
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x28a>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2b0>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2b0>
 8000c1a:	3e02      	subs	r6, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	1ac9      	subs	r1, r1, r3
 8000c20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0x104>
 8000c26:	462e      	mov	r6, r5
 8000c28:	4628      	mov	r0, r5
 8000c2a:	e705      	b.n	8000a38 <__udivmoddi4+0xa4>
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	e6e3      	b.n	80009f8 <__udivmoddi4+0x64>
 8000c30:	4618      	mov	r0, r3
 8000c32:	e6f8      	b.n	8000a26 <__udivmoddi4+0x92>
 8000c34:	454b      	cmp	r3, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f8>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c40:	3801      	subs	r0, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f8>
 8000c44:	4646      	mov	r6, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x28a>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1e2>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x260>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b8>
 8000c54:	3b02      	subs	r3, #2
 8000c56:	4461      	add	r1, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x12c>
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	e709      	b.n	8000a72 <__udivmoddi4+0xde>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x156>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <main>:

uint32_t test;

void CLK_Init(void);

int main(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af04      	add	r7, sp, #16

	HAL_Init();
 8000c6e:	f000 fb09 	bl	8001284 <HAL_Init>

	CLK_Init();
 8000c72:	f000 f843 	bl	8000cfc <CLK_Init>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <main+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <main+0x88>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <main+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

	// Timer Initialize Funtion
	TIM_Init(&hTIMStruct, 				//	Struct
 8000c92:	236c      	movs	r3, #108	; 0x6c
 8000c94:	9302      	str	r3, [sp, #8]
 8000c96:	2300      	movs	r3, #0
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <main+0x8c>)
 8000caa:	f000 f8cf 	bl	8000e4c <TIM_Init>
			 TIM_CLOCKDIVISION_DIV1,	//	Clock Division
			 TIM_OC | TIM_IC			//	Initialize Mode
			 );

	// Timer OC Config Function
	TIM_OC_Config(&hTIMStruct, 			//	Struct
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <main+0x90>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	9200      	str	r2, [sp, #0]
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	480e      	ldr	r0, [pc, #56]	; (8000cf4 <main+0x8c>)
 8000cbc:	f000 f912 	bl	8000ee4 <TIM_OC_Config>
				  stp, 					//	Pulse
				  TIM_OCPOLARITY_HIGH	//	OCPolarity
				  );

	// Timer IC Config Function
	TIM_IC_Config(&hTIMStruct, 						//	Struct
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2104      	movs	r1, #4
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <main+0x8c>)
 8000ccc:	f000 f934 	bl	8000f38 <TIM_IC_Config>
				  TIM_INPUTCHANNELPOLARITY_RISING, 	//	IC Polarity
				  TIM_ICSELECTION_DIRECTTI, 		//	IC Selection
				  TIM_ICPSC_DIV1					//	IC Prescaler
				  );

	HAL_TIM_MspPostInit(&hTIMStruct);   //  GPIO Configuration
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <main+0x8c>)
 8000cd2:	f000 fa2f 	bl	8001134 <HAL_TIM_MspPostInit>

	//	Timer Interrupt Start Function
	TIM_StartStop_IT(TIM_START, &hTIMStruct, TIM_OC, TIM_CHANNEL_1);  // Timer Output Compare Start
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	2264      	movs	r2, #100	; 0x64
 8000cda:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <main+0x8c>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f953 	bl	8000f88 <TIM_StartStop_IT>
	TIM_StartStop_IT(TIM_START, &hTIMStruct, TIM_IC, TIM_CHANNEL_2);  // Timer Input Capture Start
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	4903      	ldr	r1, [pc, #12]	; (8000cf4 <main+0x8c>)
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f000 f94d 	bl	8000f88 <TIM_StartStop_IT>

	while(1)
 8000cee:	e7fe      	b.n	8000cee <main+0x86>
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	20000030 	.word	0x20000030
 8000cf8:	20000000 	.word	0x20000000

08000cfc <CLK_Init>:
		;

	return 0;
}

void CLK_Init(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b092      	sub	sp, #72	; 0x48
 8000d00:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef	OSCStruct;

	OSCStruct.OscillatorType	= RCC_OSCILLATORTYPE_HSI;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
	OSCStruct.HSIState 			= RCC_HSI_ON;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24

	if(HAL_RCC_OscConfig(&OSCStruct) != HAL_OK)
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fdd8 	bl	80018c4 <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d002      	beq.n	8000d20 <CLK_Init+0x24>
		isError = ERROR;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <CLK_Init+0x58>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]

	RCC_ClkInitTypeDef	RCCStruct;

	RCCStruct.ClockType 		= RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d20:	230f      	movs	r3, #15
 8000d22:	607b      	str	r3, [r7, #4]
	RCCStruct.SYSCLKSource		= RCC_SYSCLKSOURCE_HSI;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
	RCCStruct.AHBCLKDivider		= RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
	RCCStruct.APB1CLKDivider	= RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
	RCCStruct.APB2CLKDivider	= RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

	if(HAL_RCC_ClockConfig(&RCCStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 f83b 	bl	8001db4 <HAL_RCC_ClockConfig>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d002      	beq.n	8000d4a <CLK_Init+0x4e>
		isError = ERROR;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <CLK_Init+0x58>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	3748      	adds	r7, #72	; 0x48
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000002c 	.word	0x2000002c

08000d58 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

	callback_val = __HAL_TIM_GET_COMPARE(&hTIMStruct, TIM_CHANNEL_1);
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000d68:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&hTIMStruct, TIM_CHANNEL_1, callback_val + stp);
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_TIM_OC_DelayElapsedCallback+0x30>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	440a      	add	r2, r1
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34

}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000030 	.word	0x20000030
 8000d8c:	20000078 	.word	0x20000078
 8000d90:	20000000 	.word	0x20000000
 8000d94:	00000000 	.word	0x00000000

08000d98 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

	test ++;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000da8:	6013      	str	r3, [r2, #0]

	static uint8_t captured_times;
	uint32_t difference;
	double period_of_input_signal;

	if(captured_times == 0){
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_IC_CaptureCallback+0x32>
		capture_val1 = __HAL_TIM_GET_COMPARE(&hTIMStruct, TIM_CHANNEL_2);
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000dba:	6013      	str	r3, [r2, #0]
		captured_times++;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000dc6:	701a      	strb	r2, [r3, #0]

		period_of_input_signal = (double)difference * (PERIOD);
		frequency_of_input_signal = 1 / period_of_input_signal;
	}

}
 8000dc8:	e029      	b.n	8000e1e <HAL_TIM_IC_CaptureCallback+0x86>
	else if(captured_times == 1){
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d125      	bne.n	8000e1e <HAL_TIM_IC_CaptureCallback+0x86>
		capture_val2 = __HAL_TIM_GET_COMPARE(&hTIMStruct, TIM_CHANNEL_2);
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000dda:	6013      	str	r3, [r2, #0]
		captured_times = 0;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		difference = capture_val2 - capture_val1;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
		period_of_input_signal = (double)difference * (PERIOD);
 8000dee:	6978      	ldr	r0, [r7, #20]
 8000df0:	f7ff fb2c 	bl	800044c <__aeabi_ui2d>
 8000df4:	a30c      	add	r3, pc, #48	; (adr r3, 8000e28 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfa:	f7ff fba1 	bl	8000540 <__aeabi_dmul>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	e9c7 2302 	strd	r2, r3, [r7, #8]
		frequency_of_input_signal = 1 / period_of_input_signal;
 8000e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000e10:	f7ff fcc0 	bl	8000794 <__aeabi_ddiv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	490b      	ldr	r1, [pc, #44]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000e1a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	a0b5ed8d 	.word	0xa0b5ed8d
 8000e2c:	3e70c6f7 	.word	0x3e70c6f7
 8000e30:	20000090 	.word	0x20000090
 8000e34:	20000094 	.word	0x20000094
 8000e38:	20000030 	.word	0x20000030
 8000e3c:	2000007c 	.word	0x2000007c
 8000e40:	20000080 	.word	0x20000080
 8000e44:	3ff00000 	.word	0x3ff00000
 8000e48:	20000088 	.word	0x20000088

08000e4c <TIM_Init>:
 *  Created on: 18 Haz 2022
 *      Author: enesb
 */
#include "mytimerfunctions.h"

void TIM_Init(TIM_HandleTypeDef* htim2, TIM_TypeDef* TIMx, uint32_t Prescaler, uint32_t CounterMode, uint32_t Period, uint32_t ClockDivision, uint8_t TimerMode){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]

	 htim2->Instance = TIMx;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	601a      	str	r2, [r3, #0]
	 htim2->Init.Prescaler = Prescaler;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	605a      	str	r2, [r3, #4]
	 htim2->Init.CounterMode = CounterMode;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	609a      	str	r2, [r3, #8]
	 htim2->Init.Period = Period;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	60da      	str	r2, [r3, #12]
	 htim2->Init.ClockDivision = ClockDivision;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	69fa      	ldr	r2, [r7, #28]
 8000e76:	611a      	str	r2, [r3, #16]


	 if(TIM_BASE & TimerMode){
 8000e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d008      	beq.n	8000e98 <TIM_Init+0x4c>
		 if (HAL_TIM_Base_Init(htim2) != HAL_OK)
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f001 f940 	bl	800210c <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <TIM_Init+0x4c>
		   {
			 isError = ERROR;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <TIM_Init+0x94>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	701a      	strb	r2, [r3, #0]
		   }
	 }
	 if(TIM_OC & TimerMode){
 8000e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e9c:	f003 0364 	and.w	r3, r3, #100	; 0x64
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d008      	beq.n	8000eb8 <TIM_Init+0x6c>
		 if (HAL_TIM_OC_Init(htim2) != HAL_OK)
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f001 fa29 	bl	80022fe <HAL_TIM_OC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <TIM_Init+0x6c>
		   {
			 isError = ERROR;;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <TIM_Init+0x94>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
		   }
	 }
	 if(TIM_IC & TimerMode){
 8000eb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d008      	beq.n	8000ed8 <TIM_Init+0x8c>
		 if (HAL_TIM_IC_Init(htim2) != HAL_OK)
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f001 fc3c 	bl	8002744 <HAL_TIM_IC_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <TIM_Init+0x8c>
		   {
			 isError = ERROR;
 8000ed2:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <TIM_Init+0x94>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
		   }
	 }
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000002c 	.word	0x2000002c

08000ee4 <TIM_OC_Config>:

void TIM_OC_Config(TIM_HandleTypeDef* htim2, uint32_t Channel, uint32_t OCMode, uint32_t Pulse, uint32_t OCPolarity){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]

	TIM_OC_InitTypeDef	TIMOCStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	619a      	str	r2, [r3, #24]

	TIMOCStruct.OCMode 		= OCMode;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	617b      	str	r3, [r7, #20]
	TIMOCStruct.Pulse		= Pulse;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
	TIMOCStruct.OCPolarity	= OCPolarity;
 8000f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f10:	61fb      	str	r3, [r7, #28]

	if(HAL_TIM_OC_ConfigChannel(htim2, &TIMOCStruct, Channel) != HAL_OK)
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f001 ff4a 	bl	8002db4 <HAL_TIM_OC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <TIM_OC_Config+0x48>
		isError = ERROR;
 8000f26:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <TIM_OC_Config+0x50>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000002c 	.word	0x2000002c

08000f38 <TIM_IC_Config>:

void TIM_IC_Config(TIM_HandleTypeDef* htim2, uint32_t Channel, uint32_t ICPolarity, uint32_t ICSelection, uint32_t ICPrescaler){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	603b      	str	r3, [r7, #0]

	TIM_IC_InitTypeDef	TIMICStruct = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]

	TIMICStruct.ICPolarity 	= ICPolarity;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	613b      	str	r3, [r7, #16]
	TIMICStruct.ICSelection	= ICSelection;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	617b      	str	r3, [r7, #20]
	TIMICStruct.ICPrescaler	= ICPrescaler;
 8000f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5e:	61bb      	str	r3, [r7, #24]

	if(HAL_TIM_IC_ConfigChannel(htim2, &TIMICStruct, Channel) != HAL_OK)
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	4619      	mov	r1, r3
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f001 ff7f 	bl	8002e6c <HAL_TIM_IC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <TIM_IC_Config+0x42>
		isError = ERROR;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <TIM_IC_Config+0x4c>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	3720      	adds	r7, #32
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000002c 	.word	0x2000002c

08000f88 <TIM_StartStop_IT>:

void TIM_StartStop_IT(uint8_t status, TIM_HandleTypeDef* htim2, uint8_t TimerMode, uint32_t Channel){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	4613      	mov	r3, r2
 8000f98:	73bb      	strb	r3, [r7, #14]

	if(status == TIM_START){
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d126      	bne.n	8000fee <TIM_StartStop_IT+0x66>
		if(TimerMode == TIM_BASE){
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <TIM_StartStop_IT+0x30>
			if(HAL_TIM_Base_Start_IT(htim2) != HAL_OK)
 8000fa6:	68b8      	ldr	r0, [r7, #8]
 8000fa8:	f001 f90a 	bl	80021c0 <HAL_TIM_Base_Start_IT>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <TIM_StartStop_IT+0x30>
						isError = ERROR;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <TIM_StartStop_IT+0xbc>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
		}
		if(TimerMode == TIM_OC){
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d109      	bne.n	8000fd2 <TIM_StartStop_IT+0x4a>
			if(HAL_TIM_OC_Start_IT(htim2, Channel) != HAL_OK)
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f001 f9eb 	bl	800239c <HAL_TIM_OC_Start_IT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <TIM_StartStop_IT+0x4a>
				isError = ERROR;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <TIM_StartStop_IT+0xbc>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
		}
		if(TimerMode == TIM_IC){
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d130      	bne.n	800103a <TIM_StartStop_IT+0xb2>
			if(HAL_TIM_IC_Start_IT(htim2, Channel) != HAL_OK )
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f001 fc0c 	bl	80027f8 <HAL_TIM_IC_Start_IT>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d029      	beq.n	800103a <TIM_StartStop_IT+0xb2>
				isError = ERROR;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <TIM_StartStop_IT+0xbc>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
			if(HAL_TIM_IC_Stop_IT(htim2, Channel) != HAL_OK )
				isError = ERROR;
		}
	}

}
 8000fec:	e025      	b.n	800103a <TIM_StartStop_IT+0xb2>
		if(TimerMode == TIM_BASE){
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d108      	bne.n	8001006 <TIM_StartStop_IT+0x7e>
			if(HAL_TIM_Base_Stop_IT(htim2) != HAL_OK)
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f001 f953 	bl	80022a0 <HAL_TIM_Base_Stop_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <TIM_StartStop_IT+0x7e>
				isError = ERROR;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <TIM_StartStop_IT+0xbc>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
		if(TimerMode == TIM_OC){
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d109      	bne.n	8001020 <TIM_StartStop_IT+0x98>
			if(HAL_TIM_OC_Stop_IT(htim2, Channel) != HAL_OK)
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	68b8      	ldr	r0, [r7, #8]
 8001010:	f001 fada 	bl	80025c8 <HAL_TIM_OC_Stop_IT>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <TIM_StartStop_IT+0x98>
				isError = ERROR;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <TIM_StartStop_IT+0xbc>)
 800101c:	2201      	movs	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
		if(TimerMode == TIM_IC){
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	2b08      	cmp	r3, #8
 8001024:	d109      	bne.n	800103a <TIM_StartStop_IT+0xb2>
			if(HAL_TIM_IC_Stop_IT(htim2, Channel) != HAL_OK )
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	68b8      	ldr	r0, [r7, #8]
 800102a:	f001 fd0d 	bl	8002a48 <HAL_TIM_IC_Stop_IT>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <TIM_StartStop_IT+0xb2>
				isError = ERROR;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <TIM_StartStop_IT+0xbc>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000002c 	.word	0x2000002c

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <HAL_MspInit+0x4c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	603b      	str	r3, [r7, #0]
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <HAL_MspInit+0x4c>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a08      	ldr	r2, [pc, #32]	; (8001094 <HAL_MspInit+0x4c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b8:	d133      	bne.n	8001122 <HAL_TIM_OC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <HAL_TIM_OC_MspInit+0x94>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <HAL_TIM_OC_MspInit+0x94>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_TIM_OC_MspInit+0x94>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_TIM_OC_MspInit+0x94>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <HAL_TIM_OC_MspInit+0x94>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_TIM_OC_MspInit+0x94>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f2:	2302      	movs	r3, #2
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001102:	2301      	movs	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <HAL_TIM_OC_MspInit+0x98>)
 800110e:	f000 fa3d 	bl	800158c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	201c      	movs	r0, #28
 8001118:	f000 fa01 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800111c:	201c      	movs	r0, #28
 800111e:	f000 fa1a 	bl	8001556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001154:	d11d      	bne.n	8001192 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_TIM_MspPostInit+0x68>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a0f      	ldr	r2, [pc, #60]	; (800119c <HAL_TIM_MspPostInit+0x68>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_TIM_MspPostInit+0x68>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001172:	2301      	movs	r3, #1
 8001174:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001182:	2301      	movs	r3, #1
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4619      	mov	r1, r3
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <HAL_TIM_MspPostInit+0x6c>)
 800118e:	f000 f9fd 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f89a 	bl	8001328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&hTIMStruct);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <TIM2_IRQHandler+0x10>)
 80011fe:	f001 fcd1 	bl	8002ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000030 	.word	0x20000030

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001268 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001236:	490e      	ldr	r1, [pc, #56]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001238:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800124c:	4c0b      	ldr	r4, [pc, #44]	; (800127c <LoopFillZerobss+0x26>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800125a:	f7ff ffd7 	bl	800120c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f002 fa73 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001262:	f7ff fd01 	bl	8000c68 <main>
  bx  lr    
 8001266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001268:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001270:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001274:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8001278:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800127c:	2000009c 	.word	0x2000009c

08001280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_Init+0x40>)
 800128e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_Init+0x40>)
 800129a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_Init+0x40>)
 80012a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ac:	2003      	movs	r0, #3
 80012ae:	f000 f92b 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b2:	200f      	movs	r0, #15
 80012b4:	f000 f808 	bl	80012c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b8:	f7ff fec6 	bl	8001048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x54>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 f943 	bl	8001572 <HAL_SYSTICK_Config>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00e      	b.n	8001314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b0f      	cmp	r3, #15
 80012fa:	d80a      	bhi.n	8001312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012fc:	2200      	movs	r2, #0
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f000 f90b 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001308:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_InitTick+0x5c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000004 	.word	0x20000004
 8001320:	2000000c 	.word	0x2000000c
 8001324:	20000008 	.word	0x20000008

08001328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_IncTick+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4413      	add	r3, r2
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_IncTick+0x24>)
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000098 	.word	0x20000098

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000098 	.word	0x20000098

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	; (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	; (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	; (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	; 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	; 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff3e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff8e 	bl	800145c <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5d 	bl	8001408 <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff31 	bl	80013cc <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa2 	bl	80014c4 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e16b      	b.n	8001880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 815a 	bne.w	800187a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80b4 	beq.w	800187a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b60      	ldr	r3, [pc, #384]	; (8001898 <HAL_GPIO_Init+0x30c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a5f      	ldr	r2, [pc, #380]	; (8001898 <HAL_GPIO_Init+0x30c>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <HAL_GPIO_Init+0x30c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a5b      	ldr	r2, [pc, #364]	; (800189c <HAL_GPIO_Init+0x310>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_GPIO_Init+0x314>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02b      	beq.n	80017b2 <HAL_GPIO_Init+0x226>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a51      	ldr	r2, [pc, #324]	; (80018a4 <HAL_GPIO_Init+0x318>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x222>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x31c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x21e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <HAL_GPIO_Init+0x320>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x21a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_GPIO_Init+0x324>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x216>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x328>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x212>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x32c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_GPIO_Init+0x330>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x20a>
 8001792:	2307      	movs	r3, #7
 8001794:	e00e      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 8001796:	2308      	movs	r3, #8
 8001798:	e00c      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 800179a:	2306      	movs	r3, #6
 800179c:	e00a      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 800179e:	2305      	movs	r3, #5
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017b2:	2300      	movs	r3, #0
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c4:	4935      	ldr	r1, [pc, #212]	; (800189c <HAL_GPIO_Init+0x310>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_GPIO_Init+0x334>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3301      	adds	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	f67f ae90 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e267      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d075      	beq.n	80019ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018e2:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d00c      	beq.n	8001908 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b85      	ldr	r3, [pc, #532]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4b82      	ldr	r3, [pc, #520]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001906:	d10b      	bne.n	8001920 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d05b      	beq.n	80019cc <HAL_RCC_OscConfig+0x108>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d157      	bne.n	80019cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e242      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d106      	bne.n	8001938 <HAL_RCC_OscConfig+0x74>
 800192a:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a75      	ldr	r2, [pc, #468]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xb0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x98>
 8001942:	4b70      	ldr	r3, [pc, #448]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xb0>
 800195c:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a65      	ldr	r2, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fce8 	bl	8001350 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fce4 	bl	8001350 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e207      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b5b      	ldr	r3, [pc, #364]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xc0>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fcd4 	bl	8001350 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fcd0 	bl	8001350 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1f3      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b51      	ldr	r3, [pc, #324]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0xe8>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019da:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x152>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1c7      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4937      	ldr	r1, [pc, #220]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <HAL_RCC_OscConfig+0x244>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fc89 	bl	8001350 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff fc85 	bl	8001350 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1a8      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4925      	ldr	r1, [pc, #148]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x244>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fc68 	bl	8001350 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff fc64 	bl	8001350 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e187      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d036      	beq.n	8001b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_RCC_OscConfig+0x248>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff fc48 	bl	8001350 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fc44 	bl	8001350 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e167      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x200>
 8001ae2:	e01b      	b.n	8001b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_OscConfig+0x248>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fc31 	bl	8001350 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	e00e      	b.n	8001b10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc2d 	bl	8001350 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d907      	bls.n	8001b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e150      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	42470000 	.word	0x42470000
 8001b0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ea      	bne.n	8001af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8097 	beq.w	8001c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b81      	ldr	r3, [pc, #516]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b7d      	ldr	r3, [pc, #500]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a7c      	ldr	r2, [pc, #496]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b77      	ldr	r3, [pc, #476]	; (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b74      	ldr	r3, [pc, #464]	; (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a73      	ldr	r2, [pc, #460]	; (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fbed 	bl	8001350 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff fbe9 	bl	8001350 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e10c      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x2ea>
 8001ba0:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x324>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x30c>
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bba:	4a5e      	ldr	r2, [pc, #376]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a5b      	ldr	r2, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0x324>
 8001bd0:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a57      	ldr	r2, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	4b55      	ldr	r3, [pc, #340]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d015      	beq.n	8001c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fbae 	bl	8001350 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fbaa 	bl	8001350 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0cb      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0ee      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x334>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fb98 	bl	8001350 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff fb94 	bl	8001350 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0b5      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ee      	bne.n	8001c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a38      	ldr	r2, [pc, #224]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a1 	beq.w	8001da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d05c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d141      	bne.n	8001cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <HAL_RCC_OscConfig+0x478>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fb68 	bl	8001350 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff fb64 	bl	8001350 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e087      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b27      	ldr	r3, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	491b      	ldr	r1, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	; (8001d3c <HAL_RCC_OscConfig+0x478>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fb3d 	bl	8001350 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fb39 	bl	8001350 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e05c      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x416>
 8001cf8:	e054      	b.n	8001da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x478>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fb26 	bl	8001350 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff fb22 	bl	8001350 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e045      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x444>
 8001d26:	e03d      	b.n	8001da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e038      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x4ec>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d028      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d121      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d111      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0cc      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d90c      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b8      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e08:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e20:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a52      	ldr	r2, [pc, #328]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	494d      	ldr	r1, [pc, #308]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d044      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d119      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e07f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d003      	beq.n	8001e72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e06f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e067      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b37      	ldr	r3, [pc, #220]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4934      	ldr	r1, [pc, #208]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff fa54 	bl	8001350 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff fa50 	bl	8001350 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e04f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d20c      	bcs.n	8001efc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e032      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4916      	ldr	r1, [pc, #88]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	490e      	ldr	r1, [pc, #56]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f3a:	f000 f821 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	490a      	ldr	r1, [pc, #40]	; (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	5ccb      	ldrb	r3, [r1, r3]
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f9b4 	bl	80012c8 <HAL_InitTick>

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	080037a8 	.word	0x080037a8
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	20000008 	.word	0x20000008

08001f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b090      	sub	sp, #64	; 0x40
 8001f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f98:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f200 80a1 	bhi.w	80020ec <HAL_RCC_GetSysClockFreq+0x16c>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x3a>
 8001fb2:	e09b      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001fb8:	e09b      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fba:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fbc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fbe:	e098      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d028      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	2200      	movs	r2, #0
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	627a      	str	r2, [r7, #36]	; 0x24
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fec:	fb03 f201 	mul.w	r2, r3, r1
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	fb00 f303 	mul.w	r3, r0, r3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a43      	ldr	r2, [pc, #268]	; (8002108 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ffa:	fba0 1202 	umull	r1, r2, r0, r2
 8001ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002000:	460a      	mov	r2, r1
 8002002:	62ba      	str	r2, [r7, #40]	; 0x28
 8002004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002006:	4413      	add	r3, r2
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200c:	2200      	movs	r2, #0
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	61fa      	str	r2, [r7, #28]
 8002012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800201a:	f7fe fca3 	bl	8000964 <__aeabi_uldivmod>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4613      	mov	r3, r2
 8002024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002026:	e053      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	099b      	lsrs	r3, r3, #6
 800202e:	2200      	movs	r2, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	617a      	str	r2, [r7, #20]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800203a:	f04f 0b00 	mov.w	fp, #0
 800203e:	4652      	mov	r2, sl
 8002040:	465b      	mov	r3, fp
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002050:	0150      	lsls	r0, r2, #5
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	ebb2 080a 	subs.w	r8, r2, sl
 800205a:	eb63 090b 	sbc.w	r9, r3, fp
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800206a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800206e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002072:	ebb2 0408 	subs.w	r4, r2, r8
 8002076:	eb63 0509 	sbc.w	r5, r3, r9
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	00eb      	lsls	r3, r5, #3
 8002084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002088:	00e2      	lsls	r2, r4, #3
 800208a:	4614      	mov	r4, r2
 800208c:	461d      	mov	r5, r3
 800208e:	eb14 030a 	adds.w	r3, r4, sl
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	eb45 030b 	adc.w	r3, r5, fp
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a6:	4629      	mov	r1, r5
 80020a8:	028b      	lsls	r3, r1, #10
 80020aa:	4621      	mov	r1, r4
 80020ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020b0:	4621      	mov	r1, r4
 80020b2:	028a      	lsls	r2, r1, #10
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ba:	2200      	movs	r2, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	60fa      	str	r2, [r7, #12]
 80020c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c4:	f7fe fc4e 	bl	8000964 <__aeabi_uldivmod>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4613      	mov	r3, r2
 80020ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020ea:	e002      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetSysClockFreq+0x184>)
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3740      	adds	r7, #64	; 0x40
 80020f8:	46bd      	mov	sp, r7
 80020fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	00f42400 	.word	0x00f42400
 8002108:	017d7840 	.word	0x017d7840

0800210c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e041      	b.n	80021a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f839 	bl	80021aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f000 ff48 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d001      	beq.n	80021d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e04e      	b.n	8002276 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <HAL_TIM_Base_Start_IT+0xc4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d022      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002202:	d01d      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_TIM_Base_Start_IT+0xc8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d018      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_TIM_Base_Start_IT+0xcc>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <HAL_TIM_Base_Start_IT+0xd0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00e      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_TIM_Base_Start_IT+0xd4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_TIM_Base_Start_IT+0xd8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_TIM_Base_Start_IT+0x80>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_TIM_Base_Start_IT+0xdc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d111      	bne.n	8002264 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b06      	cmp	r3, #6
 8002250:	d010      	beq.n	8002274 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0201 	orr.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	e007      	b.n	8002274 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40010400 	.word	0x40010400
 8002298:	40014000 	.word	0x40014000
 800229c:	40001800 	.word	0x40001800

080022a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a1a      	ldr	r2, [r3, #32]
 80022be:	f241 1311 	movw	r3, #4369	; 0x1111
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10f      	bne.n	80022e8 <HAL_TIM_Base_Stop_IT+0x48>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	f240 4344 	movw	r3, #1092	; 0x444
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_TIM_Base_Stop_IT+0x48>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e041      	b.n	8002394 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d106      	bne.n	800232a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7fe feb7 	bl	8001098 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f000 fe4f 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <HAL_TIM_OC_Start_IT+0x28>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e022      	b.n	800240a <HAL_TIM_OC_Start_IT+0x6e>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d109      	bne.n	80023de <HAL_TIM_OC_Start_IT+0x42>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	e015      	b.n	800240a <HAL_TIM_OC_Start_IT+0x6e>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d109      	bne.n	80023f8 <HAL_TIM_OC_Start_IT+0x5c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e008      	b.n	800240a <HAL_TIM_OC_Start_IT+0x6e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e0c7      	b.n	80025a2 <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <HAL_TIM_OC_Start_IT+0x86>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	e013      	b.n	800244a <HAL_TIM_OC_Start_IT+0xae>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d104      	bne.n	8002432 <HAL_TIM_OC_Start_IT+0x96>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002430:	e00b      	b.n	800244a <HAL_TIM_OC_Start_IT+0xae>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d104      	bne.n	8002442 <HAL_TIM_OC_Start_IT+0xa6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002440:	e003      	b.n	800244a <HAL_TIM_OC_Start_IT+0xae>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d841      	bhi.n	80024d4 <HAL_TIM_OC_Start_IT+0x138>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <HAL_TIM_OC_Start_IT+0xbc>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800248d 	.word	0x0800248d
 800245c:	080024d5 	.word	0x080024d5
 8002460:	080024d5 	.word	0x080024d5
 8002464:	080024d5 	.word	0x080024d5
 8002468:	0800249f 	.word	0x0800249f
 800246c:	080024d5 	.word	0x080024d5
 8002470:	080024d5 	.word	0x080024d5
 8002474:	080024d5 	.word	0x080024d5
 8002478:	080024b1 	.word	0x080024b1
 800247c:	080024d5 	.word	0x080024d5
 8002480:	080024d5 	.word	0x080024d5
 8002484:	080024d5 	.word	0x080024d5
 8002488:	080024c3 	.word	0x080024c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0202 	orr.w	r2, r2, #2
 800249a:	60da      	str	r2, [r3, #12]
      break;
 800249c:	e01d      	b.n	80024da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0204 	orr.w	r2, r2, #4
 80024ac:	60da      	str	r2, [r3, #12]
      break;
 80024ae:	e014      	b.n	80024da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0208 	orr.w	r2, r2, #8
 80024be:	60da      	str	r2, [r3, #12]
      break;
 80024c0:	e00b      	b.n	80024da <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0210 	orr.w	r2, r2, #16
 80024d0:	60da      	str	r2, [r3, #12]
      break;
 80024d2:	e002      	b.n	80024da <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d15f      	bne.n	80025a0 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	6839      	ldr	r1, [r7, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 f8f3 	bl	80036d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a2e      	ldr	r2, [pc, #184]	; (80025ac <HAL_TIM_OC_Start_IT+0x210>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_TIM_OC_Start_IT+0x166>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2c      	ldr	r2, [pc, #176]	; (80025b0 <HAL_TIM_OC_Start_IT+0x214>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_TIM_OC_Start_IT+0x16a>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_TIM_OC_Start_IT+0x16c>
 8002506:	2300      	movs	r3, #0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <HAL_TIM_OC_Start_IT+0x210>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d022      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252e:	d01d      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_TIM_OC_Start_IT+0x218>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_TIM_OC_Start_IT+0x21c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_TIM_OC_Start_IT+0x220>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_TIM_OC_Start_IT+0x214>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_TIM_OC_Start_IT+0x224>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_OC_Start_IT+0x1d0>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_TIM_OC_Start_IT+0x228>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010400 	.word	0x40010400
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40014000 	.word	0x40014000
 80025c4:	40001800 	.word	0x40001800

080025c8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d841      	bhi.n	8002660 <HAL_TIM_OC_Stop_IT+0x98>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002619 	.word	0x08002619
 80025e8:	08002661 	.word	0x08002661
 80025ec:	08002661 	.word	0x08002661
 80025f0:	08002661 	.word	0x08002661
 80025f4:	0800262b 	.word	0x0800262b
 80025f8:	08002661 	.word	0x08002661
 80025fc:	08002661 	.word	0x08002661
 8002600:	08002661 	.word	0x08002661
 8002604:	0800263d 	.word	0x0800263d
 8002608:	08002661 	.word	0x08002661
 800260c:	08002661 	.word	0x08002661
 8002610:	08002661 	.word	0x08002661
 8002614:	0800264f 	.word	0x0800264f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0202 	bic.w	r2, r2, #2
 8002626:	60da      	str	r2, [r3, #12]
      break;
 8002628:	e01d      	b.n	8002666 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0204 	bic.w	r2, r2, #4
 8002638:	60da      	str	r2, [r3, #12]
      break;
 800263a:	e014      	b.n	8002666 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0208 	bic.w	r2, r2, #8
 800264a:	60da      	str	r2, [r3, #12]
      break;
 800264c:	e00b      	b.n	8002666 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0210 	bic.w	r2, r2, #16
 800265c:	60da      	str	r2, [r3, #12]
      break;
 800265e:	e002      	b.n	8002666 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	bf00      	nop
  }

  if (status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d161      	bne.n	8002730 <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	6839      	ldr	r1, [r7, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f82d 	bl	80036d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a2f      	ldr	r2, [pc, #188]	; (800273c <HAL_TIM_OC_Stop_IT+0x174>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d004      	beq.n	800268e <HAL_TIM_OC_Stop_IT+0xc6>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <HAL_TIM_OC_Stop_IT+0x178>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_TIM_OC_Stop_IT+0xca>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_TIM_OC_Stop_IT+0xcc>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d017      	beq.n	80026c8 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	f241 1311 	movw	r3, #4369	; 0x1111
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <HAL_TIM_OC_Stop_IT+0x100>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	f240 4344 	movw	r3, #1092	; 0x444
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_OC_Stop_IT+0x100>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10f      	bne.n	80026f8 <HAL_TIM_OC_Stop_IT+0x130>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a1a      	ldr	r2, [r3, #32]
 80026de:	f240 4344 	movw	r3, #1092	; 0x444
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_OC_Stop_IT+0x130>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <HAL_TIM_OC_Stop_IT+0x140>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002706:	e013      	b.n	8002730 <HAL_TIM_OC_Stop_IT+0x168>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b04      	cmp	r3, #4
 800270c:	d104      	bne.n	8002718 <HAL_TIM_OC_Stop_IT+0x150>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002716:	e00b      	b.n	8002730 <HAL_TIM_OC_Stop_IT+0x168>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b08      	cmp	r3, #8
 800271c:	d104      	bne.n	8002728 <HAL_TIM_OC_Stop_IT+0x160>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002726:	e003      	b.n	8002730 <HAL_TIM_OC_Stop_IT+0x168>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e041      	b.n	80027da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f839 	bl	80027e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3304      	adds	r3, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 fc2c 	bl	8002fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_TIM_IC_Start_IT+0x1e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e013      	b.n	800283e <HAL_TIM_IC_Start_IT+0x46>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d104      	bne.n	8002826 <HAL_TIM_IC_Start_IT+0x2e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e00b      	b.n	800283e <HAL_TIM_IC_Start_IT+0x46>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d104      	bne.n	8002836 <HAL_TIM_IC_Start_IT+0x3e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e003      	b.n	800283e <HAL_TIM_IC_Start_IT+0x46>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_TIM_IC_Start_IT+0x58>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e013      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x80>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d104      	bne.n	8002860 <HAL_TIM_IC_Start_IT+0x68>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e00b      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x80>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d104      	bne.n	8002870 <HAL_TIM_IC_Start_IT+0x78>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e003      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x80>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002876:	b2db      	uxtb	r3, r3
 8002878:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800287a:	7bbb      	ldrb	r3, [r7, #14]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002880:	7b7b      	ldrb	r3, [r7, #13]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0cc      	b.n	8002a24 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d104      	bne.n	800289a <HAL_TIM_IC_Start_IT+0xa2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	e013      	b.n	80028c2 <HAL_TIM_IC_Start_IT+0xca>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d104      	bne.n	80028aa <HAL_TIM_IC_Start_IT+0xb2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a8:	e00b      	b.n	80028c2 <HAL_TIM_IC_Start_IT+0xca>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_IC_Start_IT+0xc2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	e003      	b.n	80028c2 <HAL_TIM_IC_Start_IT+0xca>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_IC_Start_IT+0xda>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	e013      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x102>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_IC_Start_IT+0xea>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e0:	e00b      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x102>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_IC_Start_IT+0xfa>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	e003      	b.n	80028fa <HAL_TIM_IC_Start_IT+0x102>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d841      	bhi.n	8002984 <HAL_TIM_IC_Start_IT+0x18c>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_TIM_IC_Start_IT+0x110>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002985 	.word	0x08002985
 8002910:	08002985 	.word	0x08002985
 8002914:	08002985 	.word	0x08002985
 8002918:	0800294f 	.word	0x0800294f
 800291c:	08002985 	.word	0x08002985
 8002920:	08002985 	.word	0x08002985
 8002924:	08002985 	.word	0x08002985
 8002928:	08002961 	.word	0x08002961
 800292c:	08002985 	.word	0x08002985
 8002930:	08002985 	.word	0x08002985
 8002934:	08002985 	.word	0x08002985
 8002938:	08002973 	.word	0x08002973
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0202 	orr.w	r2, r2, #2
 800294a:	60da      	str	r2, [r3, #12]
      break;
 800294c:	e01d      	b.n	800298a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0204 	orr.w	r2, r2, #4
 800295c:	60da      	str	r2, [r3, #12]
      break;
 800295e:	e014      	b.n	800298a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	60da      	str	r2, [r3, #12]
      break;
 8002970:	e00b      	b.n	800298a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0210 	orr.w	r2, r2, #16
 8002980:	60da      	str	r2, [r3, #12]
      break;
 8002982:	e002      	b.n	800298a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      break;
 8002988:	bf00      	nop
  }

  if (status == HAL_OK)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d148      	bne.n	8002a22 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2201      	movs	r2, #1
 8002996:	6839      	ldr	r1, [r7, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fe9b 	bl	80036d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <HAL_TIM_IC_Start_IT+0x234>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d01d      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_TIM_IC_Start_IT+0x238>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d018      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_TIM_IC_Start_IT+0x23c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_TIM_IC_Start_IT+0x240>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_TIM_IC_Start_IT+0x244>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d009      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <HAL_TIM_IC_Start_IT+0x248>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_TIM_IC_Start_IT+0x1f6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_TIM_IC_Start_IT+0x24c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d111      	bne.n	8002a12 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b06      	cmp	r3, #6
 80029fe:	d010      	beq.n	8002a22 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a10:	e007      	b.n	8002a22 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40010400 	.word	0x40010400
 8002a40:	40014000 	.word	0x40014000
 8002a44:	40001800 	.word	0x40001800

08002a48 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d841      	bhi.n	8002ae0 <HAL_TIM_IC_Stop_IT+0x98>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a99 	.word	0x08002a99
 8002a68:	08002ae1 	.word	0x08002ae1
 8002a6c:	08002ae1 	.word	0x08002ae1
 8002a70:	08002ae1 	.word	0x08002ae1
 8002a74:	08002aab 	.word	0x08002aab
 8002a78:	08002ae1 	.word	0x08002ae1
 8002a7c:	08002ae1 	.word	0x08002ae1
 8002a80:	08002ae1 	.word	0x08002ae1
 8002a84:	08002abd 	.word	0x08002abd
 8002a88:	08002ae1 	.word	0x08002ae1
 8002a8c:	08002ae1 	.word	0x08002ae1
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002acf 	.word	0x08002acf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0202 	bic.w	r2, r2, #2
 8002aa6:	60da      	str	r2, [r3, #12]
      break;
 8002aa8:	e01d      	b.n	8002ae6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0204 	bic.w	r2, r2, #4
 8002ab8:	60da      	str	r2, [r3, #12]
      break;
 8002aba:	e014      	b.n	8002ae6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0208 	bic.w	r2, r2, #8
 8002aca:	60da      	str	r2, [r3, #12]
      break;
 8002acc:	e00b      	b.n	8002ae6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0210 	bic.w	r2, r2, #16
 8002adc:	60da      	str	r2, [r3, #12]
      break;
 8002ade:	e002      	b.n	8002ae6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d156      	bne.n	8002b9a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fded 	bl	80036d4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a1a      	ldr	r2, [r3, #32]
 8002b00:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_TIM_IC_Stop_IT+0xe2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	f240 4344 	movw	r3, #1092	; 0x444
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IC_Stop_IT+0xe2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_IC_Stop_IT+0xf2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	e013      	b.n	8002b62 <HAL_TIM_IC_Stop_IT+0x11a>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_IC_Stop_IT+0x102>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_IC_Stop_IT+0x11a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d104      	bne.n	8002b5a <HAL_TIM_IC_Stop_IT+0x112>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b58:	e003      	b.n	8002b62 <HAL_TIM_IC_Stop_IT+0x11a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_TIM_IC_Stop_IT+0x12a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b70:	e013      	b.n	8002b9a <HAL_TIM_IC_Stop_IT+0x152>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d104      	bne.n	8002b82 <HAL_TIM_IC_Stop_IT+0x13a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b80:	e00b      	b.n	8002b9a <HAL_TIM_IC_Stop_IT+0x152>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d104      	bne.n	8002b92 <HAL_TIM_IC_Stop_IT+0x14a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b90:	e003      	b.n	8002b9a <HAL_TIM_IC_Stop_IT+0x152>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0202 	mvn.w	r2, #2
 8002bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe f8d6 	bl	8000d98 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f8b2 	bl	8000d58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f9df 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0204 	mvn.w	r2, #4
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe f8ac 	bl	8000d98 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe f888 	bl	8000d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f9b5 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0208 	mvn.w	r2, #8
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe f882 	bl	8000d98 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f85e 	bl	8000d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f98b 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0210 	mvn.w	r2, #16
 8002ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fe f858 	bl	8000d98 <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fe f834 	bl	8000d58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f961 	bl	8002fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d10e      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0201 	mvn.w	r2, #1
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f93e 	bl	8002fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	d10e      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d107      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fcef 	bl	8003732 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b40      	cmp	r3, #64	; 0x40
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f926 	bl	8002fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0220 	mvn.w	r2, #32
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fcb9 	bl	800371e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e048      	b.n	8002e64 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	d839      	bhi.n	8002e54 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	08002e55 	.word	0x08002e55
 8002df0:	08002e55 	.word	0x08002e55
 8002df4:	08002e55 	.word	0x08002e55
 8002df8:	08002e2b 	.word	0x08002e2b
 8002dfc:	08002e55 	.word	0x08002e55
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002e55 	.word	0x08002e55
 8002e08:	08002e39 	.word	0x08002e39
 8002e0c:	08002e55 	.word	0x08002e55
 8002e10:	08002e55 	.word	0x08002e55
 8002e14:	08002e55 	.word	0x08002e55
 8002e18:	08002e47 	.word	0x08002e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f97c 	bl	8003120 <TIM_OC1_SetConfig>
      break;
 8002e28:	e017      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f9e5 	bl	8003200 <TIM_OC2_SetConfig>
      break;
 8002e36:	e010      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fa54 	bl	80032ec <TIM_OC3_SetConfig>
      break;
 8002e44:	e009      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fac1 	bl	80033d4 <TIM_OC4_SetConfig>
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e088      	b.n	8002f9c <HAL_TIM_IC_ConfigChannel+0x130>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	6819      	ldr	r1, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f000 faea 	bl	8003480 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 020c 	bic.w	r2, r2, #12
 8002eba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	619a      	str	r2, [r3, #24]
 8002ece:	e060      	b.n	8002f92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d11c      	bne.n	8002f10 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f000 fb3f 	bl	8003568 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ef8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6999      	ldr	r1, [r3, #24]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	619a      	str	r2, [r3, #24]
 8002f0e:	e040      	b.n	8002f92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d11b      	bne.n	8002f4e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f000 fb5c 	bl	80035e2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 020c 	bic.w	r2, r2, #12
 8002f38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69d9      	ldr	r1, [r3, #28]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	61da      	str	r2, [r3, #28]
 8002f4c:	e021      	b.n	8002f92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d11c      	bne.n	8002f8e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f000 fb79 	bl	800365a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002f76:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69d9      	ldr	r1, [r3, #28]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	021a      	lsls	r2, r3, #8
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	61da      	str	r2, [r3, #28]
 8002f8c:	e001      	b.n	8002f92 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <TIM_Base_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d00f      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3d      	ldr	r2, [pc, #244]	; (80030f8 <TIM_Base_SetConfig+0x118>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3c      	ldr	r2, [pc, #240]	; (80030fc <TIM_Base_SetConfig+0x11c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3b      	ldr	r2, [pc, #236]	; (8003100 <TIM_Base_SetConfig+0x120>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <TIM_Base_SetConfig+0x124>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <TIM_Base_SetConfig+0x114>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d02b      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d027      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <TIM_Base_SetConfig+0x118>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d023      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <TIM_Base_SetConfig+0x11c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <TIM_Base_SetConfig+0x120>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01b      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a29      	ldr	r2, [pc, #164]	; (8003104 <TIM_Base_SetConfig+0x124>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d017      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a28      	ldr	r2, [pc, #160]	; (8003108 <TIM_Base_SetConfig+0x128>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a27      	ldr	r2, [pc, #156]	; (800310c <TIM_Base_SetConfig+0x12c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00f      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a26      	ldr	r2, [pc, #152]	; (8003110 <TIM_Base_SetConfig+0x130>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00b      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a25      	ldr	r2, [pc, #148]	; (8003114 <TIM_Base_SetConfig+0x134>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a24      	ldr	r2, [pc, #144]	; (8003118 <TIM_Base_SetConfig+0x138>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a23      	ldr	r2, [pc, #140]	; (800311c <TIM_Base_SetConfig+0x13c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d108      	bne.n	80030a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a0a      	ldr	r2, [pc, #40]	; (80030f4 <TIM_Base_SetConfig+0x114>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <TIM_Base_SetConfig+0xf8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a0c      	ldr	r2, [pc, #48]	; (8003104 <TIM_Base_SetConfig+0x124>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40000800 	.word	0x40000800
 8003100:	40000c00 	.word	0x40000c00
 8003104:	40010400 	.word	0x40010400
 8003108:	40014000 	.word	0x40014000
 800310c:	40014400 	.word	0x40014400
 8003110:	40014800 	.word	0x40014800
 8003114:	40001800 	.word	0x40001800
 8003118:	40001c00 	.word	0x40001c00
 800311c:	40002000 	.word	0x40002000

08003120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f023 0201 	bic.w	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0303 	bic.w	r3, r3, #3
 8003156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f023 0302 	bic.w	r3, r3, #2
 8003168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <TIM_OC1_SetConfig+0xd8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <TIM_OC1_SetConfig+0x64>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <TIM_OC1_SetConfig+0xdc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10c      	bne.n	800319e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f023 0308 	bic.w	r3, r3, #8
 800318a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 0304 	bic.w	r3, r3, #4
 800319c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a15      	ldr	r2, [pc, #84]	; (80031f8 <TIM_OC1_SetConfig+0xd8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_OC1_SetConfig+0x8e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a14      	ldr	r2, [pc, #80]	; (80031fc <TIM_OC1_SetConfig+0xdc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d111      	bne.n	80031d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40010400 	.word	0x40010400

08003200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0210 	bic.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0320 	bic.w	r3, r3, #32
 800324a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <TIM_OC2_SetConfig+0xe4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_OC2_SetConfig+0x68>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <TIM_OC2_SetConfig+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d10d      	bne.n	8003284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <TIM_OC2_SetConfig+0xe4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_OC2_SetConfig+0x94>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <TIM_OC2_SetConfig+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d113      	bne.n	80032bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800329a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40010400 	.word	0x40010400

080032ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800331a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a21      	ldr	r2, [pc, #132]	; (80033cc <TIM_OC3_SetConfig+0xe0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_OC3_SetConfig+0x66>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <TIM_OC3_SetConfig+0xe4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10d      	bne.n	800336e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	021b      	lsls	r3, r3, #8
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a16      	ldr	r2, [pc, #88]	; (80033cc <TIM_OC3_SetConfig+0xe0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_OC3_SetConfig+0x92>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a15      	ldr	r2, [pc, #84]	; (80033d0 <TIM_OC3_SetConfig+0xe4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d113      	bne.n	80033a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40010000 	.word	0x40010000
 80033d0:	40010400 	.word	0x40010400

080033d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800340a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800341e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	031b      	lsls	r3, r3, #12
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <TIM_OC4_SetConfig+0xa4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d003      	beq.n	800343c <TIM_OC4_SetConfig+0x68>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a11      	ldr	r2, [pc, #68]	; (800347c <TIM_OC4_SetConfig+0xa8>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d109      	bne.n	8003450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000
 800347c:	40010400 	.word	0x40010400

08003480 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	f023 0201 	bic.w	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <TIM_TI1_SetConfig+0xcc>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01b      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d017      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a25      	ldr	r2, [pc, #148]	; (8003550 <TIM_TI1_SetConfig+0xd0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a24      	ldr	r2, [pc, #144]	; (8003554 <TIM_TI1_SetConfig+0xd4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00f      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a23      	ldr	r2, [pc, #140]	; (8003558 <TIM_TI1_SetConfig+0xd8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00b      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a22      	ldr	r2, [pc, #136]	; (800355c <TIM_TI1_SetConfig+0xdc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a21      	ldr	r2, [pc, #132]	; (8003560 <TIM_TI1_SetConfig+0xe0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_TI1_SetConfig+0x66>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a20      	ldr	r2, [pc, #128]	; (8003564 <TIM_TI1_SetConfig+0xe4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <TIM_TI1_SetConfig+0x6a>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <TIM_TI1_SetConfig+0x6c>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e003      	b.n	800350a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	b2db      	uxtb	r3, r3
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f003 030a 	and.w	r3, r3, #10
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800
 8003558:	40000c00 	.word	0x40000c00
 800355c:	40010400 	.word	0x40010400
 8003560:	40014000 	.word	0x40014000
 8003564:	40001800 	.word	0x40001800

08003568 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0210 	bic.w	r2, r3, #16
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	031b      	lsls	r3, r3, #12
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035ba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0303 	bic.w	r3, r3, #3
 800360e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	b2db      	uxtb	r3, r3
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003632:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	621a      	str	r2, [r3, #32]
}
 800364e:	bf00      	nop
 8003650:	371c      	adds	r7, #28
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800365a:	b480      	push	{r7}
 800365c:	b087      	sub	sp, #28
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003686:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003698:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	031b      	lsls	r3, r3, #12
 800369e:	b29b      	uxth	r3, r3
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	621a      	str	r2, [r3, #32]
}
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2201      	movs	r2, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1a      	ldr	r2, [r3, #32]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	401a      	ands	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	4d0d      	ldr	r5, [pc, #52]	; (8003780 <__libc_init_array+0x38>)
 800374c:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 800374e:	1b64      	subs	r4, r4, r5
 8003750:	10a4      	asrs	r4, r4, #2
 8003752:	2600      	movs	r6, #0
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	4d0b      	ldr	r5, [pc, #44]	; (8003788 <__libc_init_array+0x40>)
 800375a:	4c0c      	ldr	r4, [pc, #48]	; (800378c <__libc_init_array+0x44>)
 800375c:	f000 f818 	bl	8003790 <_init>
 8003760:	1b64      	subs	r4, r4, r5
 8003762:	10a4      	asrs	r4, r4, #2
 8003764:	2600      	movs	r6, #0
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f855 3b04 	ldr.w	r3, [r5], #4
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	080037c0 	.word	0x080037c0
 8003784:	080037c0 	.word	0x080037c0
 8003788:	080037c0 	.word	0x080037c0
 800378c:	080037c4 	.word	0x080037c4

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
